# -*- coding: utf-8 -*-
"""statistic_data_analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zBwd9BKpL3fL6FDrP5FcH55bDBvrkbp7

###Required Libraries
"""

import pandas as pd
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import accuracy_score

"""###Importing Dataset"""

# read the dataset
data = pd.read_csv('/content/iris.data')
print(data.head())

"""###Pre-processing

Encoding Data Species Classification
"""

#label encode the target variable
encode = LabelEncoder()
data.Species = encode.fit_transform(data.Species)
print(data.head())

"""Trainning and Test Split"""

# train-test-split   
train , test = train_test_split(data,test_size=0.2,random_state=0)

print('shape of training data : ',train.shape)
print('shape of testing data',test.shape)

# seperate the target and independent variable
train_x = train.drop(columns=['Species'],axis=1)
train_y = train['Species']

test_x = test.drop(columns=['Species'],axis=1)
test_y = test['Species']

"""###Model definition, fitting and testing"""

# disabling warnings
from warnings import simplefilter
from sklearn.exceptions import ConvergenceWarning
simplefilter("ignore", category=ConvergenceWarning)

# create the object of the model
model = LogisticRegression()
model.fit(train_x,train_y)
predicted = model.predict(test_x)

# traceback
real_classes = encode.inverse_transform(test_y)
predicted_classes = encode.inverse_transform(predict)

print(f'\n******\nAccuracy Score on test data : {accuracy_score(test_y, predicted)}\n\n')

for _index in range(len(real_classes) - 1):
    print(f"{'OK' if real_classes[_index] == predicted_classes[_index] else '  '} {real_classes[_index]} - {predicted_classes[_index]}")